/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cosmin.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema that can be used for initial integration testing for producers and consumers. */
@org.apache.avro.specific.AvroGenerated
public class TestEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 4094267782303799592L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestEvent\",\"namespace\":\"org.cosmin.avro\",\"doc\":\"Schema that can be used for initial integration testing for producers and consumers.\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"client chosen random string to filter for own data\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"timestamp of message produced\"},{\"name\":\"payload\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"test payload\"},{\"name\":\"comment\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Comment\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static final SpecificData MODEL$ = new SpecificData();
    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<TestEvent> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<TestEvent> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<TestEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<TestEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<TestEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this TestEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a TestEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a TestEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static TestEvent fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** client chosen random string to filter for own data */
    private java.lang.CharSequence clientId;
    /** timestamp of message produced */
    private java.time.Instant timestamp;
    /** test payload */
    private java.lang.CharSequence payload;
    /** Comment */
    private java.lang.CharSequence comment;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public TestEvent() {}

    /**
     * All-args constructor.
     * @param clientId client chosen random string to filter for own data
     * @param timestamp timestamp of message produced
     * @param payload test payload
     * @param comment Comment
     */
    public TestEvent(java.lang.CharSequence clientId, java.time.Instant timestamp, java.lang.CharSequence payload, java.lang.CharSequence comment) {
        this.clientId = clientId;
        this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.payload = payload;
        this.comment = comment;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

    @Override
    public org.apache.avro.Schema getSchema() { return SCHEMA$; }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return clientId;
            case 1: return timestamp;
            case 2: return payload;
            case 3: return comment;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[] {
                    null,
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    null,
                    null,
                    null
            };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: clientId = (java.lang.CharSequence)value$; break;
            case 1: timestamp = (java.time.Instant)value$; break;
            case 2: payload = (java.lang.CharSequence)value$; break;
            case 3: comment = (java.lang.CharSequence)value$; break;
            default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'clientId' field.
     * @return client chosen random string to filter for own data
     */
    public java.lang.CharSequence getClientId() {
        return clientId;
    }


    /**
     * Sets the value of the 'clientId' field.
     * client chosen random string to filter for own data
     * @param value the value to set.
     */
    public void setClientId(java.lang.CharSequence value) {
        this.clientId = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return timestamp of message produced
     */
    public java.time.Instant getTimestamp() {
        return timestamp;
    }


    /**
     * Sets the value of the 'timestamp' field.
     * timestamp of message produced
     * @param value the value to set.
     */
    public void setTimestamp(java.time.Instant value) {
        this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'payload' field.
     * @return test payload
     */
    public java.lang.CharSequence getPayload() {
        return payload;
    }


    /**
     * Sets the value of the 'payload' field.
     * test payload
     * @param value the value to set.
     */
    public void setPayload(java.lang.CharSequence value) {
        this.payload = value;
    }

    /**
     * Gets the value of the 'comment' field.
     * @return Comment
     */
    public java.lang.CharSequence getComment() {
        return comment;
    }


    /**
     * Sets the value of the 'comment' field.
     * Comment
     * @param value the value to set.
     */
    public void setComment(java.lang.CharSequence value) {
        this.comment = value;
    }

    /**
     * Creates a new TestEvent RecordBuilder.
     * @return A new TestEvent RecordBuilder
     */
    public static TestEvent.Builder newBuilder() {
        return new TestEvent.Builder();
    }

    /**
     * Creates a new TestEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new TestEvent RecordBuilder
     */
    public static TestEvent.Builder newBuilder(TestEvent.Builder other) {
        if (other == null) {
            return new TestEvent.Builder();
        } else {
            return new TestEvent.Builder(other);
        }
    }

    /**
     * Creates a new TestEvent RecordBuilder by copying an existing TestEvent instance.
     * @param other The existing instance to copy.
     * @return A new TestEvent RecordBuilder
     */
    public static TestEvent.Builder newBuilder(TestEvent other) {
        if (other == null) {
            return new TestEvent.Builder();
        } else {
            return new TestEvent.Builder(other);
        }
    }

    /**
     * RecordBuilder for TestEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestEvent>
            implements org.apache.avro.data.RecordBuilder<TestEvent> {

        /** client chosen random string to filter for own data */
        private java.lang.CharSequence clientId;
        /** timestamp of message produced */
        private java.time.Instant timestamp;
        /** test payload */
        private java.lang.CharSequence payload;
        /** Comment */
        private java.lang.CharSequence comment;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(TestEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.clientId)) {
                this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.payload)) {
                this.payload = data().deepCopy(fields()[2].schema(), other.payload);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.comment)) {
                this.comment = data().deepCopy(fields()[3].schema(), other.comment);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing TestEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(TestEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.clientId)) {
                this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.payload)) {
                this.payload = data().deepCopy(fields()[2].schema(), other.payload);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.comment)) {
                this.comment = data().deepCopy(fields()[3].schema(), other.comment);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'clientId' field.
         * client chosen random string to filter for own data
         * @return The value.
         */
        public java.lang.CharSequence getClientId() {
            return clientId;
        }


        /**
         * Sets the value of the 'clientId' field.
         * client chosen random string to filter for own data
         * @param value The value of 'clientId'.
         * @return This builder.
         */
        public TestEvent.Builder setClientId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.clientId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'clientId' field has been set.
         * client chosen random string to filter for own data
         * @return True if the 'clientId' field has been set, false otherwise.
         */
        public boolean hasClientId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'clientId' field.
         * client chosen random string to filter for own data
         * @return This builder.
         */
        public TestEvent.Builder clearClientId() {
            clientId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field.
         * timestamp of message produced
         * @return The value.
         */
        public java.time.Instant getTimestamp() {
            return timestamp;
        }


        /**
         * Sets the value of the 'timestamp' field.
         * timestamp of message produced
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public TestEvent.Builder setTimestamp(java.time.Instant value) {
            validate(fields()[1], value);
            this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * timestamp of message produced
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * timestamp of message produced
         * @return This builder.
         */
        public TestEvent.Builder clearTimestamp() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'payload' field.
         * test payload
         * @return The value.
         */
        public java.lang.CharSequence getPayload() {
            return payload;
        }


        /**
         * Sets the value of the 'payload' field.
         * test payload
         * @param value The value of 'payload'.
         * @return This builder.
         */
        public TestEvent.Builder setPayload(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.payload = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'payload' field has been set.
         * test payload
         * @return True if the 'payload' field has been set, false otherwise.
         */
        public boolean hasPayload() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'payload' field.
         * test payload
         * @return This builder.
         */
        public TestEvent.Builder clearPayload() {
            payload = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'comment' field.
         * Comment
         * @return The value.
         */
        public java.lang.CharSequence getComment() {
            return comment;
        }


        /**
         * Sets the value of the 'comment' field.
         * Comment
         * @param value The value of 'comment'.
         * @return This builder.
         */
        public TestEvent.Builder setComment(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.comment = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'comment' field has been set.
         * Comment
         * @return True if the 'comment' field has been set, false otherwise.
         */
        public boolean hasComment() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'comment' field.
         * Comment
         * @return This builder.
         */
        public TestEvent.Builder clearComment() {
            comment = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public TestEvent build() {
            try {
                TestEvent record = new TestEvent();
                record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
                record.payload = fieldSetFlags()[2] ? this.payload : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.comment = fieldSetFlags()[3] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<TestEvent>
            WRITER$ = (org.apache.avro.io.DatumWriter<TestEvent>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<TestEvent>
            READER$ = (org.apache.avro.io.DatumReader<TestEvent>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}